generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VariantStatus {
  Processing
  In_transit
  Delivered
  Cancelled
  Payment_pendent
  Paid
  Refunded
}

enum RoleEnum {
  Admin
  User
  Seller
}

model Product {
  id         String    @id @default(uuid())
  ownerId    Int
  options    Option[]
  specs      Spec[]
  defaultId  String    @unique
  default    Variant   @relation("DefaultVariant", fields: [defaultId], references: [id])
  variants   Variant[] @relation("ProductVariants")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Variant {
  id          String      @id @default(uuid())
  name        String
  sku         String      @unique
  price       Float
  discount    Float?
  stock       Int
  images      String[]    
  options     Json       
  avaliations Avaliation[]
  product     Product?    @relation("ProductVariants", fields: [productId], references: [id])
  productId   String?

  defaultForProduct Product? @relation("DefaultVariant")
  
  purchasedVariants PurchasedVariant[]
  saleVariants      SaleVariant[]
}

model Option {
  id        String        @id @default(uuid())
  label     String
  type      String
  values    OptionValue[]
  product   Product       @relation(fields: [productId], references: [id])
  productId String
}

model OptionValue {
  id            String   @id @default(uuid())
  label         String
  color         String?
  relativeImage Int?
  option        Option   @relation(fields: [optionId], references: [id])
  optionId      String
}

model Spec {
  id        String   @id @default(uuid())
  label     String
  value     String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Avaliation {
  id        String   @id @default(uuid())
  star      Int
  comment   String
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId String
}

model UserProfile {
  id             Int       @id @default(autoincrement())
  name           String?
  password       String

  credentialPrivateEmail String @unique()
  isEmailVerified  Boolean  @default(false)
  emailVerificationCode String?
  emailVerificationExpiry DateTime?
  publicEmail    String? @unique()
  phone          String?
  profileImage   String?   
  memberSince    DateTime
  roles          UserRole[]

  addresses      UserAddress[]
  paymentMethods UserPaymentMethod[]
  purchases      Purchase[]
  sales          Sale[]

  sessions Sessions[]
}

model Sessions {
  id String @id @default(uuid())
  user   UserProfile @relation(fields: [userId], references: [id])
  userId Int
  refreshToken String @unique()
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  lastUsedAt DateTime @updatedAt
  expiresAt DateTime
  revoked Boolean @default(false)
}

model UserRole {
  id     Int       @id @default(autoincrement())
  role   RoleEnum
  user   UserProfile @relation(fields: [userId], references: [id])
  userId Int
}

model UserAddress {
  id         Int       @id @default(autoincrement())
  title      String
  address    String
  city       String
  state      String
  zipCode    String
  complement String?
  user       UserProfile @relation(fields: [userId], references: [id])
  userId     Int
}

model UserPaymentMethod {
  id         Int       @id @default(autoincrement())
  cardName   String
  cardNumber String
  cardType   String
  cardCvv    String
  expiry     String
  isDefault  Boolean
  user       UserProfile @relation(fields: [userId], references: [id])
  userId     Int
}

model Purchase {
  id        Int       @id @default(autoincrement())
  user      UserProfile @relation(fields: [userId], references: [id])
  userId    Int
  items     PurchasedVariant[]
  date      DateTime
}

model PurchasedVariant {
  id          Int       @id @default(autoincrement())
  variant     Variant   @relation(fields: [variantId], references: [id])
  variantId   String
  quantity    Int
  price       Float
  status      VariantStatus
  purchase    Purchase  @relation(fields: [purchaseId], references: [id])
  purchaseId  Int
}

model Sale {
  id       Int       @id @default(autoincrement())
  user     UserProfile @relation(fields: [userId], references: [id])
  userId   Int
  variants SaleVariant[]
  date     DateTime
}

model SaleVariant {
  id         Int       @id @default(autoincrement())
  variant    Variant   @relation(fields: [variantId], references: [id])
  variantId  String
  quantity   Int
  price      Float
  status     VariantStatus
  sale       Sale      @relation(fields: [saleId], references: [id])
  saleId     Int
}
